// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package usecase

import (
	"context"
	"github.com/kngnkg/tunetrail/backend/entity"
	"github.com/kngnkg/tunetrail/backend/infra/repository"
	"sync"
)

// Ensure, that UserRepositoryMock does implement UserRepository.
// If this is not the case, regenerate this file with moq.
var _ UserRepository = &UserRepositoryMock{}

// UserRepositoryMock is a mock implementation of UserRepository.
//
//	func TestSomethingThatUsesUserRepository(t *testing.T) {
//
//		// make and configure a mocked UserRepository
//		mockedUserRepository := &UserRepositoryMock{
//			GetUserByIdFunc: func(ctx context.Context, db repository.Executor, userId entity.UserId) (*entity.User, error) {
//				panic("mock out the GetUserById method")
//			},
//			GetUserByIdsFunc: func(ctx context.Context, db repository.Executor, userIds []entity.UserId) ([]*entity.User, error) {
//				panic("mock out the GetUserByIds method")
//			},
//		}
//
//		// use mockedUserRepository in code that requires UserRepository
//		// and then make assertions.
//
//	}
type UserRepositoryMock struct {
	// GetUserByIdFunc mocks the GetUserById method.
	GetUserByIdFunc func(ctx context.Context, db repository.Executor, userId entity.UserId) (*entity.User, error)

	// GetUserByIdsFunc mocks the GetUserByIds method.
	GetUserByIdsFunc func(ctx context.Context, db repository.Executor, userIds []entity.UserId) ([]*entity.User, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetUserById holds details about calls to the GetUserById method.
		GetUserById []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db repository.Executor
			// UserId is the userId argument value.
			UserId entity.UserId
		}
		// GetUserByIds holds details about calls to the GetUserByIds method.
		GetUserByIds []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db repository.Executor
			// UserIds is the userIds argument value.
			UserIds []entity.UserId
		}
	}
	lockGetUserById  sync.RWMutex
	lockGetUserByIds sync.RWMutex
}

// GetUserById calls GetUserByIdFunc.
func (mock *UserRepositoryMock) GetUserById(ctx context.Context, db repository.Executor, userId entity.UserId) (*entity.User, error) {
	if mock.GetUserByIdFunc == nil {
		panic("UserRepositoryMock.GetUserByIdFunc: method is nil but UserRepository.GetUserById was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Db     repository.Executor
		UserId entity.UserId
	}{
		Ctx:    ctx,
		Db:     db,
		UserId: userId,
	}
	mock.lockGetUserById.Lock()
	mock.calls.GetUserById = append(mock.calls.GetUserById, callInfo)
	mock.lockGetUserById.Unlock()
	return mock.GetUserByIdFunc(ctx, db, userId)
}

// GetUserByIdCalls gets all the calls that were made to GetUserById.
// Check the length with:
//
//	len(mockedUserRepository.GetUserByIdCalls())
func (mock *UserRepositoryMock) GetUserByIdCalls() []struct {
	Ctx    context.Context
	Db     repository.Executor
	UserId entity.UserId
} {
	var calls []struct {
		Ctx    context.Context
		Db     repository.Executor
		UserId entity.UserId
	}
	mock.lockGetUserById.RLock()
	calls = mock.calls.GetUserById
	mock.lockGetUserById.RUnlock()
	return calls
}

// GetUserByIds calls GetUserByIdsFunc.
func (mock *UserRepositoryMock) GetUserByIds(ctx context.Context, db repository.Executor, userIds []entity.UserId) ([]*entity.User, error) {
	if mock.GetUserByIdsFunc == nil {
		panic("UserRepositoryMock.GetUserByIdsFunc: method is nil but UserRepository.GetUserByIds was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Db      repository.Executor
		UserIds []entity.UserId
	}{
		Ctx:     ctx,
		Db:      db,
		UserIds: userIds,
	}
	mock.lockGetUserByIds.Lock()
	mock.calls.GetUserByIds = append(mock.calls.GetUserByIds, callInfo)
	mock.lockGetUserByIds.Unlock()
	return mock.GetUserByIdsFunc(ctx, db, userIds)
}

// GetUserByIdsCalls gets all the calls that were made to GetUserByIds.
// Check the length with:
//
//	len(mockedUserRepository.GetUserByIdsCalls())
func (mock *UserRepositoryMock) GetUserByIdsCalls() []struct {
	Ctx     context.Context
	Db      repository.Executor
	UserIds []entity.UserId
} {
	var calls []struct {
		Ctx     context.Context
		Db      repository.Executor
		UserIds []entity.UserId
	}
	mock.lockGetUserByIds.RLock()
	calls = mock.calls.GetUserByIds
	mock.lockGetUserByIds.RUnlock()
	return calls
}
