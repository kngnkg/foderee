// source: album.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.album.Album', null, global);
goog.exportSymbol('proto.album.SimpleArtist', null, global);
goog.exportSymbol('proto.album.Track', null, global);
goog.exportSymbol('proto.album.TrackPage', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.album.Album = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.album.Album.repeatedFields_, null);
};
goog.inherits(proto.album.Album, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.album.Album.displayName = 'proto.album.Album';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.album.SimpleArtist = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.album.SimpleArtist, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.album.SimpleArtist.displayName = 'proto.album.SimpleArtist';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.album.Track = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.album.Track, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.album.Track.displayName = 'proto.album.Track';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.album.TrackPage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.album.TrackPage.repeatedFields_, null);
};
goog.inherits(proto.album.TrackPage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.album.TrackPage.displayName = 'proto.album.TrackPage';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.album.Album.repeatedFields_ = [5,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.album.Album.prototype.toObject = function(opt_includeInstance) {
  return proto.album.Album.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.album.Album} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.album.Album.toObject = function(includeInstance, msg) {
  var f, obj = {
    albumid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    spotifyuri: jspb.Message.getFieldWithDefault(msg, 2, ""),
    spotifyurl: jspb.Message.getFieldWithDefault(msg, 3, ""),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    artistsList: jspb.Message.toObjectList(msg.getArtistsList(),
    proto.album.SimpleArtist.toObject, includeInstance),
    tracks: (f = msg.getTracks()) && proto.album.TrackPage.toObject(includeInstance, f),
    coverurl: jspb.Message.getFieldWithDefault(msg, 7, ""),
    releasedate: jspb.Message.getFieldWithDefault(msg, 8, ""),
    genresList: (f = jspb.Message.getRepeatedField(msg, 9)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.album.Album}
 */
proto.album.Album.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.album.Album;
  return proto.album.Album.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.album.Album} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.album.Album}
 */
proto.album.Album.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlbumid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpotifyuri(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpotifyurl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = new proto.album.SimpleArtist;
      reader.readMessage(value,proto.album.SimpleArtist.deserializeBinaryFromReader);
      msg.addArtists(value);
      break;
    case 6:
      var value = new proto.album.TrackPage;
      reader.readMessage(value,proto.album.TrackPage.deserializeBinaryFromReader);
      msg.setTracks(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCoverurl(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setReleasedate(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.addGenres(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.album.Album.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.album.Album.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.album.Album} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.album.Album.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAlbumid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSpotifyuri();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSpotifyurl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getArtistsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.album.SimpleArtist.serializeBinaryToWriter
    );
  }
  f = message.getTracks();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.album.TrackPage.serializeBinaryToWriter
    );
  }
  f = message.getCoverurl();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getReleasedate();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getGenresList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      9,
      f
    );
  }
};


/**
 * optional string albumId = 1;
 * @return {string}
 */
proto.album.Album.prototype.getAlbumid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.album.Album} returns this
 */
proto.album.Album.prototype.setAlbumid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string spotifyUri = 2;
 * @return {string}
 */
proto.album.Album.prototype.getSpotifyuri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.album.Album} returns this
 */
proto.album.Album.prototype.setSpotifyuri = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string spotifyUrl = 3;
 * @return {string}
 */
proto.album.Album.prototype.getSpotifyurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.album.Album} returns this
 */
proto.album.Album.prototype.setSpotifyurl = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.album.Album.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.album.Album} returns this
 */
proto.album.Album.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated SimpleArtist artists = 5;
 * @return {!Array<!proto.album.SimpleArtist>}
 */
proto.album.Album.prototype.getArtistsList = function() {
  return /** @type{!Array<!proto.album.SimpleArtist>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.album.SimpleArtist, 5));
};


/**
 * @param {!Array<!proto.album.SimpleArtist>} value
 * @return {!proto.album.Album} returns this
*/
proto.album.Album.prototype.setArtistsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.album.SimpleArtist=} opt_value
 * @param {number=} opt_index
 * @return {!proto.album.SimpleArtist}
 */
proto.album.Album.prototype.addArtists = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.album.SimpleArtist, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.album.Album} returns this
 */
proto.album.Album.prototype.clearArtistsList = function() {
  return this.setArtistsList([]);
};


/**
 * optional TrackPage tracks = 6;
 * @return {?proto.album.TrackPage}
 */
proto.album.Album.prototype.getTracks = function() {
  return /** @type{?proto.album.TrackPage} */ (
    jspb.Message.getWrapperField(this, proto.album.TrackPage, 6));
};


/**
 * @param {?proto.album.TrackPage|undefined} value
 * @return {!proto.album.Album} returns this
*/
proto.album.Album.prototype.setTracks = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.album.Album} returns this
 */
proto.album.Album.prototype.clearTracks = function() {
  return this.setTracks(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.album.Album.prototype.hasTracks = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string coverUrl = 7;
 * @return {string}
 */
proto.album.Album.prototype.getCoverurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.album.Album} returns this
 */
proto.album.Album.prototype.setCoverurl = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string releaseDate = 8;
 * @return {string}
 */
proto.album.Album.prototype.getReleasedate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.album.Album} returns this
 */
proto.album.Album.prototype.setReleasedate = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * repeated string genres = 9;
 * @return {!Array<string>}
 */
proto.album.Album.prototype.getGenresList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 9));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.album.Album} returns this
 */
proto.album.Album.prototype.setGenresList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.album.Album} returns this
 */
proto.album.Album.prototype.addGenres = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.album.Album} returns this
 */
proto.album.Album.prototype.clearGenresList = function() {
  return this.setGenresList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.album.SimpleArtist.prototype.toObject = function(opt_includeInstance) {
  return proto.album.SimpleArtist.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.album.SimpleArtist} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.album.SimpleArtist.toObject = function(includeInstance, msg) {
  var f, obj = {
    artistid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    spotifyuri: jspb.Message.getFieldWithDefault(msg, 3, ""),
    spotifyurl: jspb.Message.getFieldWithDefault(msg, 4, ""),
    name: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.album.SimpleArtist}
 */
proto.album.SimpleArtist.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.album.SimpleArtist;
  return proto.album.SimpleArtist.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.album.SimpleArtist} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.album.SimpleArtist}
 */
proto.album.SimpleArtist.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setArtistid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpotifyuri(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpotifyurl(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.album.SimpleArtist.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.album.SimpleArtist.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.album.SimpleArtist} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.album.SimpleArtist.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArtistid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSpotifyuri();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSpotifyurl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string artistId = 1;
 * @return {string}
 */
proto.album.SimpleArtist.prototype.getArtistid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.album.SimpleArtist} returns this
 */
proto.album.SimpleArtist.prototype.setArtistid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string spotifyUri = 3;
 * @return {string}
 */
proto.album.SimpleArtist.prototype.getSpotifyuri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.album.SimpleArtist} returns this
 */
proto.album.SimpleArtist.prototype.setSpotifyuri = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string spotifyUrl = 4;
 * @return {string}
 */
proto.album.SimpleArtist.prototype.getSpotifyurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.album.SimpleArtist} returns this
 */
proto.album.SimpleArtist.prototype.setSpotifyurl = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string name = 5;
 * @return {string}
 */
proto.album.SimpleArtist.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.album.SimpleArtist} returns this
 */
proto.album.SimpleArtist.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.album.Track.prototype.toObject = function(opt_includeInstance) {
  return proto.album.Track.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.album.Track} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.album.Track.toObject = function(includeInstance, msg) {
  var f, obj = {
    trackid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    spotifyuri: jspb.Message.getFieldWithDefault(msg, 3, ""),
    spotifyurl: jspb.Message.getFieldWithDefault(msg, 4, ""),
    title: jspb.Message.getFieldWithDefault(msg, 5, ""),
    durationms: jspb.Message.getFieldWithDefault(msg, 6, 0),
    tracknumber: jspb.Message.getFieldWithDefault(msg, 7, 0),
    previewurl: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.album.Track}
 */
proto.album.Track.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.album.Track;
  return proto.album.Track.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.album.Track} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.album.Track}
 */
proto.album.Track.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrackid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpotifyuri(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpotifyurl(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDurationms(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTracknumber(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreviewurl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.album.Track.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.album.Track.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.album.Track} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.album.Track.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTrackid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSpotifyuri();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSpotifyurl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDurationms();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getTracknumber();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getPreviewurl();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string trackId = 1;
 * @return {string}
 */
proto.album.Track.prototype.getTrackid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.album.Track} returns this
 */
proto.album.Track.prototype.setTrackid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string spotifyUri = 3;
 * @return {string}
 */
proto.album.Track.prototype.getSpotifyuri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.album.Track} returns this
 */
proto.album.Track.prototype.setSpotifyuri = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string spotifyUrl = 4;
 * @return {string}
 */
proto.album.Track.prototype.getSpotifyurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.album.Track} returns this
 */
proto.album.Track.prototype.setSpotifyurl = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string title = 5;
 * @return {string}
 */
proto.album.Track.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.album.Track} returns this
 */
proto.album.Track.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 durationMs = 6;
 * @return {number}
 */
proto.album.Track.prototype.getDurationms = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.album.Track} returns this
 */
proto.album.Track.prototype.setDurationms = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 trackNumber = 7;
 * @return {number}
 */
proto.album.Track.prototype.getTracknumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.album.Track} returns this
 */
proto.album.Track.prototype.setTracknumber = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string previewUrl = 8;
 * @return {string}
 */
proto.album.Track.prototype.getPreviewurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.album.Track} returns this
 */
proto.album.Track.prototype.setPreviewurl = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.album.TrackPage.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.album.TrackPage.prototype.toObject = function(opt_includeInstance) {
  return proto.album.TrackPage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.album.TrackPage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.album.TrackPage.toObject = function(includeInstance, msg) {
  var f, obj = {
    tracksList: jspb.Message.toObjectList(msg.getTracksList(),
    proto.album.Track.toObject, includeInstance),
    limit: jspb.Message.getFieldWithDefault(msg, 2, 0),
    offset: jspb.Message.getFieldWithDefault(msg, 3, 0),
    total: jspb.Message.getFieldWithDefault(msg, 4, 0),
    next: jspb.Message.getFieldWithDefault(msg, 5, ""),
    previous: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.album.TrackPage}
 */
proto.album.TrackPage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.album.TrackPage;
  return proto.album.TrackPage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.album.TrackPage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.album.TrackPage}
 */
proto.album.TrackPage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.album.Track;
      reader.readMessage(value,proto.album.Track.deserializeBinaryFromReader);
      msg.addTracks(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotal(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNext(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrevious(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.album.TrackPage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.album.TrackPage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.album.TrackPage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.album.TrackPage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTracksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.album.Track.serializeBinaryToWriter
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getNext();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPrevious();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * repeated Track tracks = 1;
 * @return {!Array<!proto.album.Track>}
 */
proto.album.TrackPage.prototype.getTracksList = function() {
  return /** @type{!Array<!proto.album.Track>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.album.Track, 1));
};


/**
 * @param {!Array<!proto.album.Track>} value
 * @return {!proto.album.TrackPage} returns this
*/
proto.album.TrackPage.prototype.setTracksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.album.Track=} opt_value
 * @param {number=} opt_index
 * @return {!proto.album.Track}
 */
proto.album.TrackPage.prototype.addTracks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.album.Track, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.album.TrackPage} returns this
 */
proto.album.TrackPage.prototype.clearTracksList = function() {
  return this.setTracksList([]);
};


/**
 * optional int32 limit = 2;
 * @return {number}
 */
proto.album.TrackPage.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.album.TrackPage} returns this
 */
proto.album.TrackPage.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 offset = 3;
 * @return {number}
 */
proto.album.TrackPage.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.album.TrackPage} returns this
 */
proto.album.TrackPage.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 total = 4;
 * @return {number}
 */
proto.album.TrackPage.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.album.TrackPage} returns this
 */
proto.album.TrackPage.prototype.setTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string next = 5;
 * @return {string}
 */
proto.album.TrackPage.prototype.getNext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.album.TrackPage} returns this
 */
proto.album.TrackPage.prototype.setNext = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string previous = 6;
 * @return {string}
 */
proto.album.TrackPage.prototype.getPrevious = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.album.TrackPage} returns this
 */
proto.album.TrackPage.prototype.setPrevious = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


goog.object.extend(exports, proto.album);
